services:
  order-db:
    image: mongo:latest
    container_name: order-db
    restart: always
    networks:
      - orchestrator-saga
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=123456
    ports:
      - 27018:27017


  product-db:
    image: postgres:latest
    container_name: product-db
    networks:
      - orchestrator-saga
    environment:
      - POSTGRES_DB=product-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"

  payment-db:
    image: postgres:latest
    container_name: payment-db
    networks:
      - orchestrator-saga
    environment:
      - POSTGRES_DB=payment-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5434:5432"

  inventory-db:
    image: postgres:latest
    container_name: inventory-db
    networks:
      - orchestrator-saga
    environment:
      - POSTGRES_DB=inventory-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5435:5432"
      

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
     - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - orchestrator-saga

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=host.docker.internal:9092
    depends_on:
      - kafka
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - orchestrator-saga

# Microservices
  order-service:
   build:
    context: ./order-service
    dockerfile: Dockerfile
   container_name: order-service
   ports:
    - "3000:3000"
   environment:
    # Configurações da porta da aplicação
    - PORTA_ORDER_SERVICE=3000

    # Configurações do Kafka
    - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    - KAFKA_TOPIC_START_SAGA=start-saga
    - KAFKA_TOPIC_NOTIFY_ENDING=notify-ending
    - KAFKA_CONSUMER_GROUP_ID=order-group

    # Configurações do MongoDB
    - MONGODB_HOST=order-db
    - MONGODB_PORT=27017
    - MONGODB_DATABASE=order-db
    - MONGODB_USERNAME=admin
    - MONGODB_PASSWORD=123456
    - MONGODB_AUTH_SOURCE=admin
   depends_on:
    - order-db
    - kafka
   networks:
    - orchestrator-saga
  

  product-validation-service:
    build:
      context: ./product-validation-service
      dockerfile: Dockerfile
    container_name: product-validation-service
    ports:
      - "8090:8090"
    environment:
     # Configurações da porta da aplicação
     - PORTA_PRODUCT_VALIDATION_SERVICE=8090

     # Configurações do Kafka 
     - KAFKA_BOOTSTRAP_SERVERS=kafka:9092  
     - KAFKA_TOPIC_ORCHESTRATOR=orchestrator
     - KAFKA_TOPIC_PRODUCT_VALIDATION_SUCCESS=product-validation-success
     - KAFKA_TOPIC_PRODUCT_VALIDATION_FAIL=product-validation-fail
     - KAFKA_CONSUMER_GROUP_ID=product-validation-group
    
     # Configurações do PostgreSQL
     - DB_HOST=product-db
     - DB_PORT=5432  
     - DB_NAME=product-db
     - DB_USER=postgres
     - DB_PASSWORD=postgres
    depends_on:
      - product-db
      - kafka
    networks:
      - orchestrator-saga

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8091:8091"
    environment:
     # Configurações da porta da aplicação
     - PORTA_PAYMENT_SERVICE=8091

     # Configurações do Kafka 
     - KAFKA_BOOTSTRAP_SERVERS=kafka:9092  
     - KAFKA_TOPIC_ORCHESTRATOR=orchestrator
     - KAFKA_TOPIC_PAYMENT_SUCCESS=payment-success  
     - KAFKA_TOPIC_PAYMENT_FAIL=payment-fail       
     - KAFKA_CONSUMER_GROUP_ID=payment-group
    
     # Configurações do PostgreSQL
     - DB_HOST=payment-db
     - DB_PORT=5432  
     - DB_NAME=payment-db
     - DB_USER=postgres
     - DB_PASSWORD=postgres
    depends_on:
      - payment-db
      - kafka
    networks:
      - orchestrator-saga

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "8092:8092"
    environment:
     # Configurações da porta da aplicação
     - PORTA_INVENTORY_SERVICE=8092

     # Configurações do Kafka
     - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
     - KAFKA_TOPIC_ORCHESTRATOR=orchestrator
     - KAFKA_TOPIC_INVENTORY_SUCCESS=inventory-success
     - KAFKA_TOPIC_INVENTORY_FAIL=inventory-fail
     - KAFKA_CONSUMER_GROUP_ID=inventory-group
    
     # Configurações do PostgreSQL
     - DB_HOST=inventory-db
     - DB_PORT=5432
     - DB_NAME=inventory-db
     - DB_USER=postgres
     - DB_PASSWORD=postgres
    depends_on:
      - inventory-db
      - kafka
    networks:
      - orchestrator-saga

  orchestrator-service:
    build:
      context: ./orchestrator-service
      dockerfile: Dockerfile
    container_name: orchestrator-service
    ports:
      - "8080:8080"
    environment:
     # Configurações da porta da aplicação
     - PORTA_ORCHESTRATOR_SERVICE=8080

     # Configurações do Kafka 
     - KAFKA_BOOTSTRAP_SERVERS=kafka:9092  
     - KAFKA_TOPIC_START_SAGA=start-saga
     - KAFKA_TOPIC_ORCHESTRATOR=orchestrator
     - KAFKA_TOPIC_FINISH_SUCCESS=finish-success
     - KAFKA_TOPIC_FINISH_FAIL=finish-fail
     - KAFKA_CONSUMER_GROUP_ID=orchestrator-group
    depends_on:
      - kafka
    networks:
      - orchestrator-saga

networks:
  orchestrator-saga:
    driver: bridge